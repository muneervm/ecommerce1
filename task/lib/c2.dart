import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'api.dart';

class Contact {
  String name;
  String number;
  String email;
  File? photo;

  Contact({required this.name, required this.number, required this.email, this.photo});
}

class ContactBook extends StatefulWidget {
  @override
  _ContactBookState createState() => _ContactBookState();
}

class _ContactBookState extends State<ContactBook> {
  List<Contact> contacts = [];
  TextEditingController _searchController = TextEditingController();
  TextEditingController _nameController = TextEditingController();
  TextEditingController _numberController = TextEditingController();
  TextEditingController _emailController = TextEditingController();
  File? _image;


  void fetchDataFromApi() async {
    try {
      List<Autogenerated> data = await fetchData();
      setState(() {
        // Map fetched data to contacts
        contacts = data.map((item) => Contact(
          name: item.title ?? '',
          number: item.id.toString(),
          email: item.body ?? '',
          
        )).toList();
      });
    } catch (e) {

      print('Error fetching data: $e');
    }
  }

  @override
  void initState() {
    super.initState();

    fetchDataFromApi();
  }

  void _openGallery() async {
    final picker = ImagePicker();
    final pickedFile = await picker.getImage(source: ImageSource.gallery);

    setState(() {
      if (pickedFile != null) {
        _image = File(pickedFile.path);
      } else {
        print('No image selected.');
      }
    });
  }

  void _addContact() {
    setState(() {
      contacts.add(Contact(
        name: _nameController.text,
        number: _numberController.text,
        email: _emailController.text,
        photo: _image,
      ));
      _nameController.clear();
      _numberController.clear();
      _emailController.clear();
      _image = null;
    });
  }

  void _editContact(Contact contact) {
    setState(() {
      _nameController.text = contact.name;
      _numberController.text = contact.number;
      _emailController.text = contact.email;
      _image = contact.photo;
    });
  }

  void _deleteContact(Contact contact) {
    setState(() {
      contacts.remove(contact);
    });
  }

  List<Contact> _searchContacts(String query) {
    return contacts.where((contact) {
      return contact.name.toLowerCase().contains(query.toLowerCase()) ||
          contact.number.contains(query) ||
          contact.email.toLowerCase().contains(query.toLowerCase());
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Contact Book'),
      ),
      body: Column(
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              controller: _searchController,
              onChanged: (value) {
                setState(() {});
              },
              decoration: InputDecoration(
                hintText: 'Search by name, number, or email',
                prefixIcon: Icon(Icons.search),
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _searchController.text.isEmpty
                  ? contacts.length
                  : _searchContacts(_searchController.text).length,
              itemBuilder: (context, index) {
                final contact = _searchController.text.isEmpty
                    ? contacts[index]
                    : _searchContacts(_searchController.text)[index];
                return ListTile(
                  leading: CircleAvatar(
                    backgroundImage: contact.photo != null ? FileImage(contact.photo!) : null,
                    child: contact.photo == null ? Icon(Icons.person) : null,
                  ),
                  title: Text(contact.name),
                  subtitle: Text(contact.number),
                  onTap: () {
                    _editContact(contact);
                  },
                  trailing: IconButton(
                    icon: Icon(Icons.delete),
                    onPressed: () {
                      _deleteContact(contact);
                    },
                  ),
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                title: Text('Add Contact'),
                content: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: <Widget>[
                      GestureDetector(
                        onTap: _openGallery,
                        child: _image == null
                            ? Icon(Icons.add_a_photo, size: 100.0)
                            : Image.file(
                          _image!,
                          height: 100.0,
                          width: 100.0,
                          fit: BoxFit.cover,
                        ),
                      ),
                      SizedBox(height: 10.0),
                      TextField(
                        controller: _nameController,
                        decoration: InputDecoration(
                          labelText: 'Name',
                        ),
                      ),
                      TextField(
                        controller: _numberController,
                        keyboardType: TextInputType.phone,
                        decoration: InputDecoration(
                          labelText: 'Number',
                        ),
                      ),
                      TextField(
                        controller: _emailController,
                        keyboardType: TextInputType.emailAddress,
                        decoration: InputDecoration(
                          labelText: 'Email',
                        ),
                      ),
                    ],
                  ),
                ),
                actions: <Widget>[
                  TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    child: Text('Cancel'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      _addContact();
                      Navigator.pop(context);
                    },
                    child: Text('Save'),
                  ),
                ],
              );
            },
          );
        },
        child: Icon(Icons.add),
      ),
    );
  }
}
